#!/usr/bin/env bash
# This script was generated by bashly 1.0.8 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cluster_usage() {
  if [[ -n $long_usage ]]; then
    printf "cluster - Installs, starts, stops, deletes, and shows the status of the cluster.\n"
    echo

  else
    printf "cluster - Installs, starts, stops, deletes, and shows the status of the cluster.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cluster COMMAND\n"
  printf "  cluster [COMMAND] --help | -h\n"
  printf "  cluster --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Install/creates the cluster\n" "install"
  printf "  %s   Starts the cluster\n" "start  "
  printf "  %s   Status of the cluster\n" "status "
  printf "  %s   Stops the cluster\n" "stop   "
  printf "  %s   Deletes the cluster\n" "delete "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
cluster_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "cluster install - Install/creates the cluster\n"
    echo

  else
    printf "cluster install - Install/creates the cluster\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cluster install [NODES]\n"
  printf "  cluster install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NODES"
    printf "    Amount of nodes create. Each node have a web-service running.\n"
    printf "    Default: 2\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cluster install\n"
    printf "  cluster install -n 3\n"
    echo

  fi
}

# :command.usage
cluster_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "cluster start - Starts the cluster\n"
    echo

  else
    printf "cluster start - Starts the cluster\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cluster start\n"
  printf "  cluster start --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cluster_status_usage() {
  if [[ -n $long_usage ]]; then
    printf "cluster status - Status of the cluster\n"
    echo

  else
    printf "cluster status - Status of the cluster\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cluster status\n"
  printf "  cluster status --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cluster_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "cluster stop - Stops the cluster\n"
    echo

  else
    printf "cluster stop - Stops the cluster\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cluster stop\n"
  printf "  cluster stop --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cluster_delete_usage() {
  if [[ -n $long_usage ]]; then
    printf "cluster delete - Deletes the cluster\n"
    echo

  else
    printf "cluster delete - Deletes the cluster\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cluster delete\n"
  printf "  cluster delete --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
cluster_install_command() {
  # src/install_command.sh
  # Gets the value of the argument, if no argument was supplied defaults to 2
  eval "nodes=(${args[nodes]})"

  # Creates the required folders where container specific info is going to go.
  mkdir -p build/load_balancer
  mkdir -p build/web-servers

  # Copy contents of the load_balancer's template to the build folder
  cp -r templates/load_balancer/* build/load_balancer

  # When it defaults to two go with 3 to 1
  if [ "$nodes" = "2" ];
  then
     sed -i "s/REPLACEME/server skybox-ws-1 weight=3;\n\tREPLACEME/g" build/load_balancer/nginx.conf
     sed -i "s/REPLACEME/server skybox-ws-2;/g" build/load_balancer/nginx.conf
  fi

  for i in $(seq $nodes);
  do
     echo "Configuring node number: $i ..."
     eval ws=ws-${i}
     mkdir -p build/web-servers/$ws
     cp templates/web-server/* build/web-servers/$ws
     sed -i "s/REPLACEME/$ws/g" build/web-servers/$ws/index.html

     if [ "$nodes" != "2" ];
     then
         echo "Adding entry in load balancer"
         sed -i "s/REPLACEME/server skybox-$ws;\n\tREPLACEME/g" build/load_balancer/nginx.conf
     fi
  done

  echo "Nodes configuration has finished successfully!"

  # Cleanup
  sed -i "s/REPLACEME//g" build/load_balancer/nginx.conf

  terraform apply -var size=$nodes

}

# :command.function
cluster_start_command() {
  # src/start_command.sh
  containers=$(docker ps -qaf "name=^skybox" -f "status=exited")
  if [ "${containers}" ]
  then
      echo "Starting containers... "
      docker start $containers

  else
      echo "No containers stopped found. Either run \`cluster install\` to setup the cluster or the containers are already running"
  fi

}

# :command.function
cluster_status_command() {
  # src/status_command.sh
  # Displays when the containers had been started
  containers=$(docker ps -qf "name=^skybox")

  if [ "${containers}" ];
  then
      for container_id in $containers;
      do
          values=$(docker inspect $container_id | grep StartedAt)
          echo "Container $container_id: $values"

      done
  else
      echo "No container running"
  fi

}

# :command.function
cluster_stop_command() {
  # src/stop_command.sh
  containers=$(docker ps -qf "name=^skybox")

  if [ "${containers}" ]
  then
      echo "Stopping containers..."
      docker stop $containers
  else
      echo "No containers found"
  fi

}

# :command.function
cluster_delete_command() {
  # src/delete_command.sh
  terraform destroy
  rm -rf build/

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        cluster_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install | i)
      action="install"
      shift
      cluster_install_parse_requirements "$@"
      shift $#
      ;;

    start | s)
      action="start"
      shift
      cluster_start_parse_requirements "$@"
      shift $#
      ;;

    status)
      action="status"
      shift
      cluster_status_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      cluster_stop_parse_requirements "$@"
      shift $#
      ;;

    delete | d)
      action="delete"
      shift
      cluster_delete_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cluster_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cluster_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cluster_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['nodes']+x} ]]; then

          args['nodes']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['nodes']:-} ]] || args['nodes']="2"

}

# :command.parse_requirements
cluster_start_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cluster_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="start"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cluster_status_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cluster_status_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="status"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cluster_stop_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cluster_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cluster_delete_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cluster_delete_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="delete"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "install") cluster_install_command ;;
    "start") cluster_start_command ;;
    "status") cluster_status_command ;;
    "stop") cluster_stop_command ;;
    "delete") cluster_delete_command ;;
  esac
}

initialize
run "$@"
